name: Semgrep Full Scan

on: push

jobs:

  semgrep-full:
      runs-on: self-hosted
      container:
        image: returntocorp/semgrep

      steps:

        # step 1
        - name: clone application source code
          uses: actions/checkout@v3

        # step 2
        - name: full scan
          run: |
            echo ${{ github.event.repository.name }}
            apk add curl
            apk add jq
            semgrep --config=auto . --json > report.json
            #!/bin/bash
            #Create product in DefectDojo
            curl -X POST -H "Content-Type: application/json" -H "Authorization: Token 474cea4a2382f0e2b9667186563e9927715c4d3d" -d '{"name":"'"${{ github.event.repository.name }}"'","description":"automated product import via GB Actions","prod_type":1}' http://10.120.0.167:8080/api/v2/products/
            #Fetch Product ID from product Name
            curl -X 'GET' 'http://10.120.0.167:8080/api/v2/products/?prefetch=' -H 'accept: application/json' -H "Authorization: Token 474cea4a2382f0e2b9667186563e9927715c4d3d" > /tmp/dj_products.json
            #Fetch Engagement ID and check if exits before creating
            curl -X 'GET' 'http://10.120.0.167:8080/api/v2/engagements/?prefetch=' -H 'accept: application/json' -H 'Authorization: Token 474cea4a2382f0e2b9667186563e9927715c4d3d' > /tmp/dj_engagements.json
            if [ "$(cat /tmp/dj_engagements.json| jq '.results[] | select(.name=="'"$echo"CICD-"${{ github.event.repository.name }}"'") | .id')" ]; then echo "importing scan to existing CICD engagement"; curl -X POST "http://10.120.0.167:8080/api/v2/reimport-scan/" -H  "accept: application/json" -H  "Content-Type: multipart/form-data"  -H "Authorization: Token 474cea4a2382f0e2b9667186563e9927715c4d3d" -F "minimum_severity=Info" -F "active=true" -F "scan_type=Semgrep JSON Report" -F "close_old_findings=false" -F "push_to_jira=false" -F "file=@./report.json" -F "product_name=${{ github.event.repository.name }}" -F "scan_date=2022-06-14" -F "engagement_name=CICD-${{ github.event.repository.name }}"; else echo "creating new CICD engagement"; prodId=$(cat /tmp/dj_products.json | jq '.results[] | select(.name=="'"${{ github.event.repository.name }}"'") | .id'); curl -X 'POST' 'http://10.120.0.167:8080/api/v2/engagements/' -H 'accept: application/json' -H 'Content-Type: application/json' -H 'Authorization: Token 474cea4a2382f0e2b9667186563e9927715c4d3d' -d '{"name": "'"$echo"CICD-"${{ github.event.repository.name }}"'","description": "CICD Engagement","target_start": "2023-04-11","target_end": "2023-04-11","engagement_type": "CI/CD","deduplication_on_engagement": true,"lead": 1,"product": "'$prodId'"'; curl -X POST "http://10.120.0.167:8080/api/v2/reimport-scan/" -H  "accept: application/json" -H  "Content-Type: multipart/form-data"  -H "Authorization: Token 474cea4a2382f0e2b9667186563e9927715c4d3d" -F "minimum_severity=Info" -F "active=true" -F "scan_type=Semgrep JSON Report" -F "close_old_findings=false" -F "push_to_jira=false" -F "file=@./report.json" -F "product_name=${{ github.event.repository.name }}" -F "scan_date=2022-06-14" -F "engagement_name=CICD-${{ github.event.repository.name }}"; fi
            
            

        # step 3
        - name: save report as pipeline artifact
          uses: actions/upload-artifact@v3
          with:
            name: report.json
            path: report.json
            
        # step 4
        - name: Cleanup
          if: ${{ always() }}
          run: docker ps -q | xargs -n 1 -P 8 -I {} docker stop {}
            
